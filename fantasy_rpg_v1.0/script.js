let logMessages = [];
let typingTimeout = null;
let typedLength = 0;


const locations = ["–î–µ—Ä–µ–≤–Ω—è –≠–ª—å–º–∏—Ä", "–õ–µ—Å –¢–µ–Ω–µ–π", "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π —Ö—Ä–∞–º", "–ü–µ—â–µ—Ä–∞ —Ç—Ä–æ–ª–ª–µ–π", "–†–µ–∫–∞ –ú—ë—Ä—Ç–≤—ã—Ö", "–ë–∞—à–Ω—è –∫–æ–ª–¥—É–Ω–∞"];
const items = ["–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", "–ú–µ—á", "–©–∏—Ç", "–ö–∞—Ä—Ç–∞ –ø–æ–¥–∑–µ–º–µ–ª—å—è", "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª"];
const shopItems = [
  { name: "–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", price: 10, effect: () => healPlayer(30) },
  { name: "–ú–µ—á", price: 50 },
  { name: "–©–∏—Ç", price: 40 }
];
const enemies = [
  { name: "–ì–æ–±–ª–∏–Ω", hp: 30, attack: 5, reward: { exp: 10, gold: 5 } },
  { name: "–°–∫–µ–ª–µ—Ç", hp: 40, attack: 7, reward: { exp: 15, gold: 10 } },
  { name: "–¢—Ä–æ–ª–ª—å", hp: 60, attack: 10, reward: { exp: 20, gold: 15 } }
];
const quests = [
  { id: 1, title: "–ü–æ–±–µ–¥–∏—Ç—å –≥–æ–±–ª–∏–Ω–∞", target: "–ì–æ–±–ª–∏–Ω", targetCount: 1, reward: { gold: 20, items: ["–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"] } },
  { id: 2, title: "–ü—Ä–∏–Ω–µ—Å—Ç–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª", target: null, targetCount: 0, reward: { gold: 10, items: ["–ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª"] } }
];

let player = null;

// --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
function addLog(msg) {
  logMessages.push(msg);
  if (logMessages.length > 8) logMessages.shift();
  updateLog();
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –ø–µ—á–∞—Ç–∏ (—á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–ª–∏—Å—å –≤—ã–∑–æ–≤—ã)

function updateLog() {
  const logDiv = document.getElementById("log");
  if (!logDiv) return;

  if (typingTimeout) {
    clearTimeout(typingTimeout);
    typingTimeout = null;
  }

  const fullText = logMessages.join("\n");
  // –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—á–∞—Ç—å —Å –ø–æ–∑–∏—Ü–∏–∏ typedLength
  let currentIndex = typedLength;

  function typeNext() {
    if (currentIndex <= fullText.length) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å —É–∂–µ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç + —á–∞—Å—Ç—å –Ω–æ–≤–æ–π
      logDiv.innerText = fullText.slice(0, currentIndex);
      logDiv.scrollTop = logDiv.scrollHeight;

      currentIndex++;

      if (currentIndex > typedLength) {
        typedLength = currentIndex;
      }

      if (currentIndex <= fullText.length) {
        typingTimeout = setTimeout(typeNext, 15);
      }
    }
  }

  typeNext();
}


// --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ ---
function loadGame() {
  const saved = localStorage.getItem("player");
  return saved ? JSON.parse(saved) : null;
}

function saveGame() {
  localStorage.setItem("player", JSON.stringify(player));
}

// --- –°—Ç–∞—Ä—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ---
function startGame() {
  logMessages = [];
  const screen = document.getElementById("screen");
  screen.innerHTML = `
    <h2>–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h2>
    <input id="name" placeholder="–ò–º—è –≥–µ—Ä–æ—è" /><br><br>
    <select id="class">
      <option value="–í–æ–∏–Ω">–í–æ–∏–Ω</option>
      <option value="–ú–∞–≥">–ú–∞–≥</option>
      <option value="–†–∞–∑–±–æ–π–Ω–∏–∫">–†–∞–∑–±–æ–π–Ω–∏–∫</option>
    </select><br><br>
    <button id="createBtn">–°–æ–∑–¥–∞—Ç—å</button>
    <div id="log" style="
      height: 140px; overflow-y: auto; background: rgba(0,0,0,0.75);
      color: #f0e6d2; padding: 10px; border-radius: 8px; margin-top: 20px;
      font-family: monospace; font-size: 14px; white-space: pre-wrap;"></div>
  `;
  document.getElementById("createBtn").onclick = createCharacter;
  updateLog();
}

// --- –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ---
function createCharacter() {
  const name = document.getElementById("name").value.trim();
  if (!name) {
    alert("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–µ—Ä–æ—è!");
    return;
  }
  const charClass = document.getElementById("class").value;

  player = {
    name,
    class: charClass,
    hp: 100,
    inventory: [],
    location: "–î–µ—Ä–µ–≤–Ω—è –≠–ª—å–º–∏—Ä",
    quest: null,
    exp: 0,
    gold: 0,
    level: 1,
    equipment: { weapon: null, armor: null }
  };

  saveGame();
  addLog(`–°–æ–∑–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ ${player.name} (${player.class})`);
  showMainScreen();
}

// --- –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω ---
function showMainScreen() {
  player = loadGame();
  if (!player) {
    startGame();
    return;
  }
  const screen = document.getElementById("screen");

  const questText = player.quest
    ? `–ó–∞–¥–∞–Ω–∏–µ: ${player.quest.title} (–ü—Ä–æ–≥—Ä–µ—Å—Å: ${player.quest.progress || 0}/${player.quest.targetCount})`
    : "–ó–∞–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";

  screen.innerHTML = `
    <div id="player-info">
      <h2>${player.name} (${player.class})</h2>
      <p>–£—Ä–æ–≤–µ–Ω—å: ${player.level}</p>
      <p>HP: ${player.hp} | Exp: ${player.exp} | üí∞: ${player.gold}</p>
      <p>–û—Ä—É–∂–∏–µ: ${player.equipment.weapon || "–Ω–µ—Ç"} | –ë—Ä–æ–Ω—è: ${player.equipment.armor || "–Ω–µ—Ç"}</p>
      <p>–õ–æ–∫–∞—Ü–∏—è: ${player.location}</p>
      <p>${questText}</p>
    </div>
    <div id="log" style="
      height: 140px; overflow-y: auto; background: rgba(0,0,0,0.75);
      color: #f0e6d2; padding: 10px; border-radius: 8px; margin: 10px 0;
      font-family: monospace; font-size: 14px; white-space: pre-wrap;"></div>
    <div id="actions" style="margin-top: 10px;"></div>
  `;

  updateLog();

  // –ö–Ω–æ–ø–∫–∏
  const actions = [
    { text: "–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è", handler: explore },
    { text: "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", handler: showInventory },
    { text: "–ë–∏—Ç–≤–∞", handler: startBattle },
    { text: "–ó–∞–¥–∞–Ω–∏–µ", handler: getQuest },
    { text: "–ú–∞–≥–∞–∑–∏–Ω", handler: openShop },
    { text: "–ö–∞—Ä—Ç–∞", handler: openMap },
    { text: "–°–±—Ä–æ—Å–∏—Ç—å", handler: resetGame }
  ];
  showActions(actions);
}

// --- –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ ---
function showActions(actions) {
  const actionsDiv = document.getElementById("actions");
  if (!actionsDiv) {
    console.error("–ù–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ #actions –¥–ª—è –∫–Ω–æ–ø–æ–∫!");
    return;
  }
  actionsDiv.innerHTML = "";
  actions.forEach(action => {
    const btn = document.createElement("button");
    btn.innerText = action.text;
    btn.onclick = action.handler;
    btn.style.margin = "5px";
    actionsDiv.appendChild(btn);
  });
}

// --- –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å ---
function explore() {
  const loc = locations[Math.floor(Math.random() * locations.length)];
  player.location = loc;
  addLog(`–í—ã –ø—Ä–∏–±—ã–ª–∏ –≤ ${loc}`);
  if (Math.random() > 0.7) {
    const item = items[Math.floor(Math.random() * items.length)];
    player.inventory.push(item);
    addLog(`–í—ã –Ω–∞—à–ª–∏ ${item}`);
  }
  saveGame();
  showMainScreen();
}

// --- –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å ---
function showInventory() {
  const screen = document.getElementById("screen");

  if (player.inventory.length === 0) {
    addLog("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.");
    showMainScreen();
    return;
  }

  let invHTML = `
    <h2>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</h2>
    <div id="log" style="
      height: 140px; overflow-y: auto; background: rgba(0,0,0,0.75);
      color: #f0e6d2; padding: 10px; border-radius: 8px; margin: 10px 0;
      font-family: monospace; font-size: 14px; white-space: pre-wrap;">${logMessages.join("\n")}</div>
    <ul style="list-style:none; padding-left:0;">
  `;

  player.inventory.forEach((item, i) => {
    invHTML += `<li style="margin-bottom: 8px;">
      ${item} 
      <button onclick="useItem(${i})">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</button>
    </li>`;
  });

  invHTML += `</ul><button onclick="showMainScreen()">–ù–∞–∑–∞–¥</button>`;

  screen.innerHTML = invHTML;
}

// --- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç ---
function useItem(index) {
  const item = player.inventory[index];
  if (!item) {
    addLog("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç");
    showInventory();
    return;
  }

  if (item === "–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è") {
    player.hp = Math.min(player.hp + 30, 100);
    addLog("–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∑–µ–ª—å–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ 30 HP");
    player.inventory.splice(index, 1);
  } else if (item === "–ú–µ—á" || item === "–©–∏—Ç") {
    if (item === "–ú–µ—á") player.equipment.weapon = item;
    if (item === "–©–∏—Ç") player.equipment.armor = item;
    addLog(`–í—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª–∏ ${item}`);
    player.inventory.splice(index, 1);
  } else {
    addLog("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.");
  }

  saveGame();
  showInventory();
}

// --- –ù–∞—á–∞—Ç—å –±–∏—Ç–≤—É ---
function startBattle() {
  const enemy = JSON.parse(JSON.stringify(enemies[Math.floor(Math.random() * enemies.length)]));
  addLog(`–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ ${enemy.name}!`);

  let weaponBonus = player.equipment.weapon === "–ú–µ—á" ? 5 : 0;
  let armorBonus = player.equipment.armor === "–©–∏—Ç" ? 3 : 0;

  function battleStep() {
    if (enemy.hp <= 0) {
      addLog(`–í—ã –ø–æ–±–µ–¥–∏–ª–∏ ${enemy.name}! +${enemy.reward.exp} –æ–ø—ã—Ç–∞, +${enemy.reward.gold} –º–æ–Ω–µ—Ç`);
      player.exp += enemy.reward.exp;
      player.gold += enemy.reward.gold;

      const expToLevel = player.level * 100;
      if (player.exp >= expToLevel) {
        player.level++;
        player.exp -= expToLevel;
        player.hp = 100;
        addLog(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${player.level}! HP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.`);
      }

      if (player.quest && player.quest.target === enemy.name) {
        player.quest.progress = (player.quest.progress || 0) + 1;
        if (player.quest.progress >= player.quest.targetCount) {
          addLog("–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞.");
          player.gold += player.quest.reward.gold || 0;
          if (player.quest.reward.items) player.inventory.push(...player.quest.reward.items);
          player.quest = null;
        } else {
          addLog(`–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è: ${player.quest.progress} / ${player.quest.targetCount}`);
        }
      }

      saveGame();
      showMainScreen();
      return;
    }

    if (player.hp <= 0) {
      addLog("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏... –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.");
      localStorage.removeItem("player");
      startGame();
      return;
    }

    enemy.hp -= 15 + weaponBonus;
    addLog(`–í—ã —É–¥–∞—Ä–∏–ª–∏ ${enemy.name}, –µ–≥–æ HP: ${Math.max(enemy.hp, 0)}`);

    if (enemy.hp > 0) {
      player.hp -= Math.max(0, enemy.attack - armorBonus);
      addLog(`${enemy.name} –∞—Ç–∞–∫—É–µ—Ç –≤–∞—Å. –í–∞—à HP: ${Math.max(player.hp, 0)}`);
    }

    saveGame();
    setTimeout(battleStep, 800);
  }

  battleStep();
}

// --- –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ ---
function getQuest() {
  if (player.quest) {
    addLog("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ.");
    showMainScreen();
    return;
  }
  const quest = quests[Math.floor(Math.random() * quests.length)];
  player.quest = { ...quest, progress: 0 };
  addLog(`–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ${quest.title}`);
  saveGame();
  showMainScreen();
}

// --- –ú–∞–≥–∞–∑–∏–Ω —Å –ø–æ–∫—É–ø–∫–æ–π ---
function openShop() {
  const screen = document.getElementById("screen");
  let shopHTML = `
    <h2>–ú–∞–≥–∞–∑–∏–Ω</h2>
    <div id="log" style="
      height: 140px; overflow-y: auto; background: rgba(0,0,0,0.75);
      color: #f0e6d2; padding: 10px; border-radius: 8px; margin: 10px 0;
      font-family: monospace; font-size: 14px; white-space: pre-wrap;">${logMessages.join("\n")}</div>
    <ul style="list-style:none; padding-left:0;">
  `;

  shopItems.forEach((item, i) => {
    shopHTML += `<li style="margin-bottom: 8px;">
      ${item.name} ‚Äî ${item.price} –º–æ–Ω–µ—Ç 
      <button onclick="buyItem(${i})">–ö—É–ø–∏—Ç—å</button>
    </li>`;
  });

  shopHTML += `</ul><button onclick="showMainScreen()">–ù–∞–∑–∞–¥</button>`;

  screen.innerHTML = shopHTML;
}

// --- –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç ---
function buyItem(index) {
  const item = shopItems[index];
  if (player.gold >= item.price) {
    player.gold -= item.price;
    player.inventory.push(item.name);
    addLog(`–í—ã –∫—É–ø–∏–ª–∏ ${item.name}`);
  } else {
    addLog("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.");
  }
  saveGame();
  openShop();
}

// --- –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É ---
function openMap() {
  addLog("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:");
  locations.forEach((loc, i) => addLog(`${i + 1}) ${loc}`));
  updateLog();
}

// --- –õ–µ—á–µ–Ω–∏–µ ---
function healPlayer(amount) {
  player.hp = Math.min(player.hp + amount, 100);
  addLog(`–í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ ${amount} HP`);
  saveGame();
}

// --- –°–±—Ä–æ—Å ---
function resetGame() {
  if (confirm("–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É?")) {
    localStorage.removeItem("player");
    location.reload();
  }
}

function openMap() {
  const screen = document.getElementById("screen");

  let mapHTML = `
    <h2>–ö–∞—Ä—Ç–∞</h2>
    <div id="log" style="
      height: 140px;
      overflow-y: auto;
      background: rgba(0,0,0,0.75);
      color: #f0e6d2;
      padding: 10px;
      border-radius: 8px;
      margin: 10px 0;
      font-family: monospace;
      font-size: 14px;
      white-space: pre-wrap;"></div>
    <ul style="list-style:none; padding:0;">
  `;

  locations.forEach((loc, i) => {
    mapHTML += `<li style="margin-bottom: 8px;">
      ${i + 1}) ${loc} 
      <button onclick="travelTo(${i})">–ü–µ—Ä–µ–π—Ç–∏</button>
    </li>`;
  });

  mapHTML += `</ul><button onclick="showMainScreen()">–ù–∞–∑–∞–¥</button>`;

  screen.innerHTML = mapHTML;

 function travelTo(index) {
  if (!player) return;
  player.location = locations[index];
  addLog(`–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ ${player.location}`);
  saveGame();
  showMainScreen();

  }
}




// --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
window.onload = () => {
  player = loadGame();
  if (player) {
    addLog(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${player.name}`);
    showMainScreen();
  } else {
    startGame();
  }
};
